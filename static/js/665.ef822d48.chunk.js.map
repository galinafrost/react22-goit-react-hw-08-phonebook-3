{"version":3,"file":"static/js/665.ef822d48.chunk.js","mappings":"6PAAaA,EAAe,CAC1BC,KAAM,GACNC,MAAO,GACPC,SAAU,I,SCyDZ,EArDqB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChBC,GAASC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IACjCC,GAAUF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCE,GAAaH,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAE3C,GAA8CG,EAAAA,EAAAA,GAAQ,CACpDN,SAAAA,EACAJ,aAAAA,IAFMW,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,aAIrBZ,EAA0BU,EAA1BV,KAAMC,EAAoBS,EAApBT,MAAOC,EAAaQ,EAAbR,SAErB,OACE,kBAAMC,SAAUS,EAAhB,WACE,4BACE,kBAAOC,QAAST,EAAhB,oBACA,kBACEU,GAAIV,EACJJ,KAAK,OACLe,MAAOf,EACPgB,SAAUL,EACVM,YAAY,aACZC,UAAQ,QAGZ,4BACE,kBAAOL,QAASN,EAAhB,qBACA,kBACEO,GAAIP,EACJP,KAAK,QACLe,MAAOd,EACPkB,KAAK,QACLH,SAAUL,EACVM,YAAY,cACZC,UAAQ,QAGZ,4BACE,kBAAOL,QAASL,EAAhB,wBACA,kBACEM,GAAIN,EACJR,KAAK,WACLe,MAAOb,EACPc,SAAUL,EACVM,YAAY,iBACZE,KAAK,WACLD,UAAQ,QAGZ,mBAAQC,KAAK,SAAb,wBAGL,EC7BD,EApBqB,WACnB,IAAMC,GAASC,EAAAA,EAAAA,KACTC,GAAUC,EAAAA,EAAAA,MAOhB,OAAIH,GACK,SAAC,KAAD,CAAUI,GAAG,eAIpB,0BACE,SAAC,EAAD,CAAcrB,SAXD,SAAAsB,GACfC,QAAQC,IAAIF,GACZH,GAAQM,EAAAA,EAAAA,IAAOH,GAChB,KAWF,C,kECHD,IAtBgB,SAAC,GAA8C,IAA7CtB,EAA4C,EAA5CA,SAAUJ,EAAkC,EAAlCA,aAAkC,IAApB8B,QAAAA,OAAoB,SAC1D,GAA0BC,EAAAA,EAAAA,WAAS,UAAI/B,IAAvC,eAAOW,EAAP,KAAcqB,EAAd,KAkBA,MAAO,CAACrB,MAAAA,EAAOqB,SAAAA,EAAUpB,aAhBJ,SAAC,GAAc,IAAbqB,EAAY,EAAZA,OACXhC,EAAegC,EAAfhC,KAAMe,EAASiB,EAATjB,MACdgB,GAAS,SAAAE,GAAS,yBACXA,GADW,cAEbjC,EAAOe,GAFM,GAIrB,EAUsCH,aARlB,SAACsB,GAClBA,EAAEC,iBACFhC,GAAS,UAAIO,IACVmB,GACCE,GAAS,UAAIhC,GAEpB,EAGJ,C","sources":["components/RegisterForm/initialState.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","shared/hooks/useForm.js"],"sourcesContent":["export const initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n","import { useMemo } from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\n\nimport useForm from '../../shared/hooks/useForm';\n\nimport { initialState } from './initialState';\n\nconst RegisterForm = ({ onSubmit }) => {\n  const nameId = useMemo(() => nanoid(), []);\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  const { state, handleChange, handleSubmit } = useForm({\n    onSubmit,\n    initialState,\n  });\n  const { name, email, password } = state;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor={nameId}>Name:</label>\n        <input\n          id={nameId}\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          placeholder=\"Input name\"\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor={emailId}>Email:</label>\n        <input\n          id={emailId}\n          name=\"email\"\n          value={email}\n          type=\"email\"\n          onChange={handleChange}\n          placeholder=\"Input email\"\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor={passwordId}>Password:</label>\n        <input\n          id={passwordId}\n          name=\"password\"\n          value={password}\n          onChange={handleChange}\n          placeholder=\"Input password\"\n          type=\"password\"\n          required\n        />\n      </div>\n      <button type=\"submit\">Register</button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import { Navigate } from 'react-router-dom';\n\nimport { useDispatch } from 'react-redux';\nimport useAuth from '../../shared/hooks/useAuth';\n\nimport { signup } from 'redux/auth/auth-operations';\n\nimport RegisterForm from '../../components/RegisterForm';\n\nconst RegisterPage = () => {\n  const isAuth = useAuth();\n  const dispath = useDispatch();\n\n  const onSignup = data => {\n    console.log(data);\n    dispath(signup(data));\n  };\n\n  if (isAuth) {\n    return <Navigate to=\"/contacts\" />;\n  }\n\n  return (\n    <div>\n      <RegisterForm onSubmit={onSignup} />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","import {useState} from \"react\";\n\nconst useForm = ({onSubmit, initialState, isReset = true}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const { name, value} = target;\n        setState(prevState => ({\n            ...prevState,\n            [name]: value\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        if(isReset) {\n            setState({...initialState})\n        }\n    };\n\n    return {state, setState, handleChange, handleSubmit};\n}\n\nexport default useForm;"],"names":["initialState","name","email","password","onSubmit","nameId","useMemo","nanoid","emailId","passwordId","useForm","state","handleChange","handleSubmit","htmlFor","id","value","onChange","placeholder","required","type","isAuth","useAuth","dispath","useDispatch","to","data","console","log","signup","isReset","useState","setState","target","prevState","e","preventDefault"],"sourceRoot":""}